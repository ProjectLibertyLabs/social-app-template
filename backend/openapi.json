{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "http://localhost:3001"
    }
  ],
  "info": {
    "title": "Social App Template API Documentation",
    "version": "1.0.0"
  },
  "paths": {
    "/assets": {
      "post": {
        "operationId": "postAssetsHandler",
        "summary": "Upload and register new assets",
        "description": "Allows clients to upload new assets. This endpoint accepts multipart file uploads and returns the identifiers for the newly uploaded assets.",
        "requestBody": {
          "description": "Payload containing the file(s) to upload. Each file must be in binary format.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadAssetRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Assets uploaded successfully. Returns identifiers for each uploaded asset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAssetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be served. Check the error message for details."
          },
          "401": {
            "description": "Unauthorized. The request requires user authentication."
          },
          "503": {
            "description": "Service Unavailable. The server is currently unable to handle the request due to a temporary overloading or maintenance of the server."
          },
          "500": {
            "description": "Internal Server Error. An unexpected condition was encountered."
          }
        }
      }
    },
    "/broadcasts": {
      "post": {
        "operationId": "postBroadcastHandler",
        "summary": "Create a new post",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostBroadcastRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "202": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostBroadcastResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/siwf": {
      "get": {
        "operationId": "authProvider",
        "summary": "Return the delegation and provider information",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login/v2/siwf/verify": {
      "post": {
        "summary": "Verify authorization code",
        "description": "Verifies the authorization code received from Frequency",
        "operationId": "verifyFrequencyAccessAuth",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAuthRequest"
              },
              "examples": {
                "withCode": {
                  "value": {
                    "authorizationCode": "680a0a68-6d3b-4d6d-89b7-0b01a6f7e86f"
                  },
                  "summary": "Using authorization code"
                },
                "withPayload": {
                  "value": {
                    "authorizationPayload": "eyJhbGciOiJIUzI1NiJ9..."
                  },
                  "summary": "Using authorization payload"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful verification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyAuthResponse"
                },
                "examples": {
                  "withMsaId": {
                    "value": {
                      "msaId": "12345"
                    },
                    "summary": "Direct success with MSA ID"
                  },
                  "withControlKey": {
                    "value": {
                      "controlKey": "abc123def456"
                    },
                    "summary": "Requires polling with control key"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid authorization code"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/accounts/account/{accountId}": {
      "get": {
        "operationId": "getAccountForAccountId",
        "summary": "Fetch an account given an Account Id",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "AccountId in hex or SS58 format",
            "schema": {
              "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          }
        },
        "tags": ["v1/accounts"]
      }
    },
    "/auth/login/v2/siwf": {
      "get": {
        "oprationId": "authFrequencyAccess",
        "summary": "Initiates the authentication process with Frequency-Access and returns necessary credentials and redirect URL",
        "responses": {
          "200": {
            "description": "Successful response with auth initiation data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrequencyAccessAuthResponse"
                },
                "example": {
                  "signedRequest": "eyJyZXF1ZXN0ZWRTaWduYXR1cmVzIjp7InB1YmxpY0tleSI6eyJlbmNvZGVkVmFsdWUiOiJmNmNMNHdxMUhVTngxMVRjdmRBQk5mOVVOWFhveUg0N21WVXdUNTl0elNGUlc4eURIIiwiZW5jb2RpbmciOiJiYXNlNTgiLCJmb3JtYXQiOiJzczU4IiwidHlwZSI6IlNyMjU1MTkifX19",
                  "frequencyRpcUrl": "wss://1.rpc.frequency.xyz",
                  "redirectUrl": "https://testnet.frequencyaccess.com/siwa/start?signedRequest=abc123"
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal server error"
        }
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "authLogin",
        "summary": "Use Sign In With Frequency to login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletLoginRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "202": {
            "description": "Account still pending creation"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "authLogout",
        "summary": "Logout and invalidate the access token",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "201": {
            "description": "Successful response"
          }
        }
      }
    },
    "/auth/account": {
      "get": {
        "operationId": "authAccount",
        "summary": "For polling to get the created account as authCreate can take time",
        "parameters": [
          {
            "name": "accountId",
            "required": false,
            "in": "query",
            "description": "AccountId in hex or SS58 format",
            "schema": {
              "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N",
              "type": "string"
            }
          },
          {
            "name": "msaId",
            "in": "query",
            "description": "The user's Message Source Account ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "in": "query",
            "description": "A reference identifier to retrieve the resource when msaId is not available",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Content not found"
          },
          "202": {
            "description": "Account still pending creation"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/content/{dsnpId}": {
      "get": {
        "operationId": "getUserFeed",
        "summary": "Get recent posts from a user, paginated",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dsnpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newestBlockNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "oldestBlockNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBroadcast"
                }
              }
            }
          }
        }
      }
    },
    "/content/feed": {
      "get": {
        "operationId": "getFeed",
        "summary": "Get the Feed for the current user, paginated",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "newestBlockNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "oldestBlockNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBroadcast"
                }
              }
            }
          }
        }
      }
    },
    "/content/discover": {
      "get": {
        "operationId": "getDiscover",
        "summary": "Get the Discovery Feed, paginated",
        "parameters": [
          {
            "name": "newestBlockNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "oldestBlockNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBroadcast"
                }
              }
            }
          }
        }
      }
    },
    "/content/create": {
      "post": {
        "operationId": "createBroadcast",
        "summary": "Create a new post",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastExtended"
                }
              }
            }
          }
        }
      }
    },
    "/content/{dsnpId}/{contentHash}": {
      "get": {
        "operationId": "getContent",
        "summary": "Get details of a specific post",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dsnpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastExtended"
                }
              }
            }
          },
          "404": {
            "description": "Content not found"
          }
        }
      }
    },
    "/content/{type}/{contentHash}": {
      "put": {
        "operationId": "editContent",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "summary": "Edit the content of a specific post",
        "parameters": [
          {
            "name": "contentHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "Broadcast or Reply",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPostRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastExtended"
                }
              }
            }
          }
        }
      }
    },
    "/graph/{msaId}/following": {
      "get": {
        "operationId": "userFollowing",
        "summary": "Get a list of users that a specific user follows",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "msaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "description": "Array of DSNP Ids",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/graph/operations/{referenceId}": {
      "get": {
        "operationId": "graphOperationStatus",
        "summary": "Get the status of a previously submitted graph operation by its referenceId",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Requested referenceId not found"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "referenceId": {
                      "type": "string",
                      "description": "ReferenceId from the request"
                    },
                    "status": {
                      "title": "status",
                      "enum": ["pending", "expired", "failed", "succeeded"],
                      "type": "string"
                    }
                  },
                  "required": ["referenceId", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/graph/{msaId}/follow": {
      "post": {
        "operationId": "graphFollow",
        "summary": "Follow a user",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "msaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "referenceId": {
                      "type": "string",
                      "description": "ReferenceId from the request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/graph/{msaId}/unfollow": {
      "post": {
        "operationId": "graphUnfollow",
        "summary": "Unfollow a user",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "msaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "referenceId": {
                      "type": "string",
                      "description": "ReferenceId from the request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{msaId}": {
      "get": {
        "operationId": "getProfile",
        "summary": "Get profile information for a specific user",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "msaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "createProfile",
        "summary": "Create/Edit the profile information for a current user",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dsnpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditProfileRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "tokenAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "accessToken"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token invalid or not found"
      }
    },
    "schemas": {
      "HandleResponse": {
        "type": "object",
        "properties": {
          "base_handle": {
            "type": "string"
          },
          "canonical_base": {
            "type": "string"
          },
          "suffix": {
            "type": "number"
          }
        },
        "required": ["base_handle", "canonical_base", "suffix"]
      },
      "AccountResponse": {
        "type": "object",
        "properties": {
          "msaId": {
            "type": "string"
          },
          "handle": {
            "$ref": "#/components/schemas/HandleResponse"
          }
        },
        "required": ["msaId"]
      },
      "VerifyAuthResponse": {
        "type": "object",
        "description": "Response will contain msaId and controlKey",
        "properties": {
          "msaId": {
            "type": "string",
            "description": "Message Source Account ID"
          },
          "controlKey": {
            "type": "string",
            "description": "Control key for polling account status"
          },
          "accessToken": {
            "type": "string",
            "description": "Access token for the user"
          },
          "expires": {
            "type": "string",
            "description": "Expiration time for the access token"
          }
        }
      },
      "VerifyAuthRequest": {
        "type": "object",
        "oneOf": [
          {
            "required": ["authorizationCode"]
          },
          {
            "required": ["authorizationPayload"]
          }
        ],
        "properties": {
          "authorizationCode": {
            "type": "string",
            "description": "The code returned from the SIWF v2 Authentication service that can be exchanged for the payload."
          },
          "authorizationPayload": {
            "type": "string",
            "description": "The SIWF v2 Authentication payload as a JSON stringified and base64url encoded value."
          }
        }
      },
      "FrequencyAccessAuthResponse": {
        "type": "object",
        "required": ["signedRequest", "frequencyRpcUrl", "redirectUrl"],
        "properties": {
          "signedRequest": {
            "type": "string",
            "description": "Base64 encoded signed request containing authentication details"
          },
          "frequencyRpcUrl": {
            "type": "string",
            "format": "uri",
            "description": "WebSocket URL for Frequency RPC connection"
          },
          "redirectUrl": {
            "type": "string",
            "format": "uri",
            "description": "URL to redirect the user for authentication"
          }
        }
      },
      "UploadAssetRequest": {
        "description": "Schema defining the request payload for uploading assets. Requires a list of files to upload.",
        "type": "object",
        "properties": {
          "files": {
            "description": "Array of files to be uploaded. Each file must be encoded in binary format.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "minItems": 1
          }
        },
        "required": ["files"]
      },
      "UploadAssetResponse": {
        "description": "Schema defining the response for a successful asset upload operation. Contains identifiers for all uploaded assets.",
        "type": "object",
        "properties": {
          "assetIds": {
            "description": "Array of unique identifiers assigned to the uploaded assets.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["assetIds"]
      },
      "ProviderResponse": {
        "type": "object",
        "properties": {
          "nodeUrl": {
            "type": "string"
          },
          "siwfUrl": {
            "type": "string"
          },
          "ipfsGateway": {
            "description": "IPFS Path Style Gateway base URI",
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "network": {
            "type": "string",
            "enum": ["local", "testnet", "mainnet"]
          }
        },
        "required": ["nodeUrl", "siwfUrl", "providerId", "schemas", "network"]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "algo": {
            "type": "string",
            "enum": ["SR25519"]
          },
          "encoding": {
            "type": "string",
            "enum": ["hex"]
          },
          "encodedValue": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": ["algo", "encodedValue", "encoding", "publicKey"]
      },
      "WalletLoginResponse": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string"
          },
          "msaId": {
            "type": "string"
          },
          "handle": {
            "type": "object",
            "minProperties": 1,
            "maxProperties": 1,
            "additionalProperties": false,
            "properties": {
              "base_handle": {
                "type": "string"
              },
              "canonical_base": {
                "type": "string"
              },
              "suffix": {
                "type": "number"
              }
            },
            "required": ["base_handle", "canonical_base", "suffix"]
          }
        },
        "required": ["referenceId"]
      },
      "WalletLoginRequest": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": false,
        "properties": {
          "signIn": {
            "type": "object",
            "properties": {
              "siwsPayload": {
                "type": "object",
                "required": ["message", "signature"],
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "signature": {
                    "type": "string"
                  }
                }
              },
              "error": {
                "type": "object",
                "required": ["message"],
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "signUp": {
            "type": "object",
            "properties": {
              "extrinsics": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["pallet", "extrinsicName", "encodedExtrinsic"],
                  "properties": {
                    "pallet": {
                      "type": "string"
                    },
                    "extrinsicName": {
                      "type": "string"
                    },
                    "encodedExtrinsic": {
                      "type": "string"
                    }
                  }
                }
              },
              "error": {
                "type": "object",
                "required": ["message"],
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "expires": {
            "type": "integer"
          },
          "msaId": {
            "type": "string"
          }
        },
        "required": ["expires", "accessToken", "msaId"]
      },
      "CreateIdentityRequest": {
        "type": "object",
        "properties": {
          "addProviderSignature": {
            "type": "string"
          },
          "algo": {
            "type": "string",
            "enum": ["SR25519"]
          },
          "baseHandle": {
            "type": "string"
          },
          "encoding": {
            "type": "string",
            "enum": ["hex"]
          },
          "expiration": {
            "type": "number"
          },
          "handleSignature": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "addProviderSignature",
          "algo",
          "baseHandle",
          "encoding",
          "expiration",
          "handleSignature",
          "publicKey"
        ]
      },
      "CreateIdentityResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "expires": {
            "type": "integer"
          }
        },
        "required": ["expires", "accessToken"]
      },
      "AuthAccountResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "expires": {
            "type": "integer"
          },
          "referenceId": {
            "type": "string"
          },
          "msaId": {
            "type": "string"
          },
          "handle": {
            "type": "object",
            "minProperties": 1,
            "maxProperties": 1,
            "additionalProperties": false,
            "properties": {
              "base_handle": {
                "type": "string"
              },
              "canonical_base": {
                "type": "string"
              },
              "suffix": {
                "type": "number"
              }
            },
            "required": ["base_handle", "canonical_base", "suffix"]
          }
        },
        "required": ["msaId", "accessToken", "expires"]
      },
      "DelegateRequest": {
        "type": "object",
        "properties": {
          "algo": {
            "type": "string",
            "enum": ["SR25519"]
          },
          "encoding": {
            "type": "string",
            "enum": ["hex"]
          },
          "encodedValue": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": ["algo", "encodedValue", "encoding", "publicKey"]
      },
      "DelegateResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "expires": {
            "type": "integer"
          }
        },
        "required": ["expires", "accessToken"]
      },
      "HandlesResponse": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string"
          },
          "handle": {
            "type": "object",
            "minProperties": 1,
            "maxProperties": 1,
            "additionalProperties": false,
            "properties": {
              "base_handle": {
                "type": "string"
              },
              "canonical_base": {
                "type": "string"
              },
              "suffix": {
                "type": "number"
              }
            },
            "required": ["base_handle", "canonical_base", "suffix"]
          }
        },
        "required": ["publicKey", "handle"]
      },
      "PaginatedBroadcast": {
        "type": "object",
        "properties": {
          "newestBlockNumber": {
            "type": "integer"
          },
          "oldestBlockNumber": {
            "type": "integer"
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BroadcastExtended"
            }
          }
        },
        "required": ["newestBlockNumber", "oldestBlockNumber", "posts"]
      },
      "Broadcast": {
        "type": "object",
        "properties": {
          "fromId": {
            "type": "string"
          },
          "content": {
            "description": "JSON-encoded Activity Content Note",
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the post"
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplyExtended"
            },
            "description": "Array of ReplyExtended objects"
          }
        },
        "required": ["fromId", "contentHash", "content", "timestamp"]
      },
      "PostBroadcastResponse": {
        "type": "object",
        "properties": {
          "content": {
            "description": "JSON-encoded Activity Content Note",
            "type": "string"
          },
          "published": {
            "type": "string",
            "description": "Timestamp of the post"
          }
        },
        "required": ["content", "published"]
      },
      "BroadcastExtended": {
        "type": "object",
        "properties": {
          "fromId": {
            "type": "string"
          },
          "contentHash": {
            "type": "string"
          },
          "content": {
            "description": "JSON-encoded Activity Content Note",
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the post"
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplyExtended"
            },
            "description": "Array of ReplyExtended objects"
          }
        },
        "required": ["fromId", "contentHash", "content", "timestamp"]
      },
      "ReplyExtended": {
        "type": "object",
        "properties": {
          "fromId": {
            "type": "string"
          },
          "contentHash": {
            "type": "string"
          },
          "content": {
            "description": "JSON-encoded Activity Content Note",
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the post"
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplyExtended"
            },
            "description": "Array of ReplyExtended objects"
          }
        },
        "required": ["fromId", "contentHash", "content", "timestamp"]
      },
      "PostBroadcastRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "inReplyTo": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["content"]
      },
      "CreatePostRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "inReplyTo": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        },
        "required": ["content"]
      },
      "EditPostRequest": {
        "type": "object",
        "properties": {
          "targetContentHash": {
            "type": "string"
          },
          "targetAnnouncementType": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          }
        },
        "required": ["content", "targetAnnouncementType", "targetContentHash"]
      },
      "Profile": {
        "type": "object",
        "properties": {
          "fromId": {
            "type": "string"
          },
          "contentHash": {
            "type": "string"
          },
          "content": {
            "description": "JSON-encoded Activity Content Note",
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the post"
          },
          "handle": {
            "type": "object",
            "minProperties": 1,
            "maxProperties": 1,
            "additionalProperties": false,
            "properties": {
              "base_handle": {
                "type": "string"
              },
              "canonical_base": {
                "type": "string"
              },
              "suffix": {
                "type": "number"
              }
            },
            "required": ["base_handle", "canonical_base", "suffix"]
          }
        },
        "required": ["fromId", "contentHash", "content", "timestamp"]
      },
      "EditProfileRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": ["content"]
      }
    }
  }
}
